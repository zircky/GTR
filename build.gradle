plugins {
  alias libs.plugins.architectury
  alias libs.plugins.architectury.loom apply false
  alias libs.plugins.vineFlower apply false // VineFlower, a better decompiler
  alias libs.plugins.machete // automatic jar compressing on build
  alias libs.plugins.shadow
}

apply plugin: "dev.architectury.loom"
apply plugin: "io.github.juuxel.loom-vineflower"
apply plugin: "java"
apply plugin: "architectury-plugin"
apply plugin: "maven-publish"

archivesBaseName = "${project.name}-${libs.versions.minecraft.get()}"
group = properties.maven_group

// Formats the mod version to include the loader, Minecraft version, and build number (if present)
String buildNumber = System.getenv("GITHUB_ACTION_NUMBER")
version = "${mod_version}" + (buildNumber != null ? "-build_${System.getenv("GITHUB_RUN_NUMBER")}" : "")


tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
  options.release = 17
}

java {
  withSourcesJar()
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
}

def mod_id = properties.mod_id

architectury {
  platformSetupLoomIde()
  forge()
  minecraft = libs.versions.minecraft
}

static def isJetBrainsRuntime() {
  return System.getProperty('java.vm.vendor').contains('JetBrains')
}

loom {
  accessWidenerPath = file("src/main/resources/${mod_id}.accesswidener")
  silentMojangMappingsLicense()

  forge {
    mixinConfig(
        "${mod_id}.mixins.json",
    )

    convertAccessWideners = true
    extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

    dataGen {
      mod(mod_id)
    }
  }

  runConfigs.named("data").configure {
    programArg("--existing=" + file("src/main/resources").absolutePath)
    programArgs("--client", "--server")
  }

  if (isJetBrainsRuntime()) {
    runs {
      client {
        vmArgs '-XX:+AllowEnhancedClassRedefinition'
        vmArgs '-XX:HotswapAgent=fatjar'
      }
    }

  }
}

configurations {
  common
  shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
  compileClasspath.extendsFrom common
  runtimeClasspath.extendsFrom common
  developmentForge.extendsFrom common
}

repositories {
  mavenLocal()
  mavenCentral()
  // mavens for Forge-exclusives
  maven { url = "https://api.modrinth.com/maven" } // Jade
  maven { url = "https://maven.theillusivec4.top/" } // Curios
  maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu, EMI
  maven { // Create Forge and Registrate Forge
    url = "https://maven.tterrag.com/"
    content {
      includeGroup("com.tterrag.registrate")
      includeGroup("com.simibubi.create")
    }
  }
  maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
  maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
  maven { // TOP
    url "https://maven.k-4u.nl"
  }
  maven {
    // saps.dev Maven (KubeJS and Rhino)
    url = "https://maven.saps.dev/minecraft"
    content {
      includeGroup "dev.latvian.mods"
    }
  }
  maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
  maven {
    url "https://cursemaven.com"
    content {
      includeGroup "curse.maven"
    }
  } // Curse Forge File
  maven {
    name = "Jared's maven"
    url = "https://maven.blamejared.com/"
  } // JEI,
  maven {
    url 'https://maven.blamejared.com'
    content {
      includeGroup "vazkii.botania"
      includeGroup "vazkii.patchouli"
    }
  }
  maven {
    // location of the maven that hosts JEI files before January 2023
    name = "Progwml6's maven"
    url = "https://dvs1.progwml6.com/files/maven/"
  }
  maven {
    // location of the maven that hosts JEI files since January 2023
    name = "Jared's maven"
    url = "https://maven.blamejared.com/"
  }
  maven {
    // location of a maven mirror for JEI files, as a fallback
    name = "ModMaven"
    url = "https://modmaven.dev"
  }
  maven {
    name = "Modrinth Maven"
    url = "https://api.modrinth.com/maven"
    content {
      includeGroup "maven.modrinth"
    }
  }
  maven { url 'https://jitpack.io' } // MixinExtras
  maven {
    // location of a maven mirror for JEI files, as a fallback
    name = "ModMaven"
    url = "https://modmaven.dev"
  } // JEI mirror, AE2
  exclusiveContent {
    forRepository {
      maven {
        url "https://cursemaven.com"
      }
    }
    filter {
      includeGroup "curse.maven"
    }
  }
  maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' } //geckolib
  maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
  maven { url = "https://maven.quiltmc.org/repository/release/" } // Quilt Mappings
  maven { url = "https://maven.firstdarkdev.xyz/snapshots" } // LDLib

}

dependencies {
  minecraft "com.mojang:minecraft:${libs.versions.minecraft.get()}"
  forge forge.minecraftForge

  // The following line declares the mojmap mappings, you may use other mappings as well
  mappings loom.layered {
    it.mappings("org.quiltmc:quilt-mappings:${libs.versions.minecraft.get()}+build.${libs.versions.quiltMappings.get()}:intermediary-v2")
    it.parchment("org.parchmentmc.data:parchment-${libs.versions.minecraft.get()}:${libs.versions.parchment.get()}@zip")
    it.officialMojangMappings { nameSyntheticMembers = false }
  }

  // LDLib
  modImplementation(forge.gtceu.forge) { transitive = false }
  modImplementation(forge.ldlib.forge) { transitive = false }

  // Registrate
  modImplementation("com.tterrag.registrate:Registrate:${forge.versions.registrate.get()}")

  // JEI
  modCompileOnly(forge.jei.common.api) { transitive = false }
  modCompileOnly(forge.jei.forge.api) { transitive = false }
  modCompileOnly(forge.jei.forge) { transitive = false }


  // REI
  modCompileOnly forge.rei.plugin
  modCompileOnly forge.rei.api
  modImplementation forge.rei.forge

  modCompileOnly("dev.emi:emi-forge:${forge.versions.emi.get()}:api")
  modCompileOnly forge.emi

  // Botania
  modImplementation(forge.botania) { transitive = false }

  // ars Nouveau
  modImplementation(forge.arsnouveau) { transitive = false }

  // Ars Energistique
  modImplementation(forge.arseng) { transitive = false }

  modImplementation(forge.geckolib)

  modCompileOnly "top.theillusivec4.curios:curios-forge:${forge.versions.curios.get()}:api"
  modImplementation(forge.curios)

  modRuntimeOnly(forge.patchouli)

/**
  // Electrodynamics
  modImplementation("curse.maven:electrodynamics-316867:5022907")

  // Nuclear_Science
  modImplementation("curse.maven:nuclear-science-318646:5022908")

  // Ballistix
  modImplementation("curse.maven:ballistix-443915:5022909")

  // Assembly_Line
  modImplementation("curse.maven:assembly-lines-404360:4903245")

  // Modular Forcefields
  modImplementation("curse.maven:modular-forcefields-322896:4878383")
 */

  // AE2
  modImplementation(forge.ae2) { transitive = false }

  //MEGA Cells
  modImplementation("curse.maven:mega-cells-622112:5125096")

  //ExtendedAE
  modImplementation("curse.maven:ex-pattern-provider-892005:5181332")

  //AE Additions - ExtraCells2 Fork
  //modImplementation("curse.maven:ae-additions-extra-cells-2-fork-493962:5077081")

  //Applied Energistics 2 Wireless Terminals
  modImplementation("curse.maven:applied-energistics-2-wireless-terminals-459929:5162352")

  //kotlin-for-forge
  //modImplementation("curse.maven:kotlin-for-forge-351264:4578885")

  //glodium
  modImplementation("curse.maven:glodium-957920:5044862")

  //modImplementation("curse.maven:draconic-evolution-223565:5524457")

  // TOP
  modCompileOnly(forge.theoneprobe) { transitive = false }

  // KJS
//  modImplementation(forge.kubejs.forge) { transitive = false }

  // Configuration
  modImplementation(forge.configuration)

  // Mixin Extras
  implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.0"))
  api("io.github.llamalad7:mixinextras-forge:0.2.0")

  // lombok
  compileOnly 'org.projectlombok:lombok:1.18.34'
  annotationProcessor 'org.projectlombok:lombok:1.18.34'

  implementation 'com.google.code.gson:gson:2.11.0'
}

processResources {
  inputs.property "version", project.version
  inputs.property "mod_id", project.mod_id

  filesMatching("META-INF/mods.toml") {
    expand "version": project.version
  }
}

shadowJar {
  exclude "fabric.mod.json"

  configurations = [project.configurations.shadowCommon]
  archiveClassifier.set("dev-shadow")
}

remapJar {
  inputFile.set jar.archiveFile
  //inputFile.set shadowJar.archiveFile
  //dependsOn shadowJar
  dependsOn(":optimizeOutputsOfJar")
  archiveClassifier.set(null)
}

jar {
  archiveClassifier.set("dev")
}

components.java {
  withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
    skip()
  }
}


publishing {
  publications {
    mavenForge(MavenPublication) {
      artifactId = rootProject.mod_id + "-" + project.name
      from components.java
    }
  }

  // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
  repositories {
    // Add repositories to publish to here.
  }
}
