architectury {
    common(rootProject.enabled_platforms.split(","))
}

String getConfig(String key) {
    return project.getParent().properties.get(key)
}

def mod_id = getConfig("mod_id")

loom {
    accessWidenerPath = file("src/main/resources/${mod_id}.accesswidener")
}

repositories {
    mavenLocal()
    // mavens for Create Fabric and dependencies
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU, Jade
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
    maven { url = "https://mvn.devos.one/snapshots/" } // Create Fabric, Porting Lib, Forge Tags, Milk Lib, Registrate Fabric
    maven { url = "https://cursemaven.com" } // Forge Config API Port
    // maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
}

//configurations {
//    snapshotModImplementation.extendsFrom modImplementation
//    snapshotModImplementation {
//        resolutionStrategy.cacheChangingModulesFor(0, "seconds")
//    }
//}

//configurations.all {
//    resolutionStrategy.cacheChangingModulesFor(0, "seconds")
//    resolutionStrategy.cacheDynamicVersionsFor(0, "seconds")
//}


dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation fabric.fabricLoader
    modCompileOnly fabric.fabricApi

    modCompileOnly(fabric.gtceu.common) { transitive = false }
    modCompileOnly(fabric.ldlib.common) //{ transitive = false }

    modCompileOnly("com.tterrag.registrate_fabric:Registrate:${fabric.versions.registrate.get()}")

    // REI
    modCompileOnly fabric.rei.plugin
    modCompileOnly fabric.rei.api
    modCompileOnly fabric.rei.fabric

    // TOP
    modCompileOnly(forge.theoneprobe) { transitive = false }

    // KJS
    modCompileOnly fabric.kubejs.common

    // Configuration
    modCompileOnly fabric.configuration

    modCompileOnly fabric.ae2

    // Mixin Extras
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.0"))
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.mod_id
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
